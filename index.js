const fs = require("fs/promises");
const path = require("path");

// ... Your createFiles and main functions ...

async function createFiles(folder) {
  const extensions = {
    "interface.ts": `
            // Define the User interface
            export interface I${folder} {
                username: string;
                email: string;
                password: string;
                createdAt?: Date; // Optional field (assuming createdAt is generated by the server)
            }
            

    `,
    "model.ts": `import mongoose, { Document, Schema } from 'mongoose';
        import {I${folder}} from './${folder}.interface.ts';
        
        // Extend the User interface to include the Document interface from Mongoose
       // interface UserDocument extends UserInterface, Document {}
        
        // Define the Mongoose schema based on the User interface
        const ${folder}Schema = new Schema<I${folder}>({
            username: {
                type: String,
                required: true,
                unique: true,
            },
            email: {
                type: String,
                required: true,
                unique: true,
            },
            password: {
                type: String,
                required: true,
            },
            createdAt: {
                type: Date,
                default: Date.now,
            },
        });
        
        // Create the User model using the schema
        const ${folder}Model = mongoose.model<I${folder}>('${folder}', ${folder}Schema);
        
        export default ${folder}Model;
        
        
    `,
    "validation.ts": `// Validation logic for ${folder}
    // Add validation functions here
    `,
    "controller.ts": `const ${folder}Service = require('./${folder}.service');

        // Controller functions for User model
        const ${folder}Controller = {
            createUser: async (req, res) => {
                try {
                    const newUser = await ${folder}Service.createUser(req.body);
                    res.status(201).json(newUser);
                } catch (error) {
                    res.status(500).json({ error: error.message });
                }
            },
            // Add more controller functions as needed
        };
        
        module.exports = ${folder}Controller;
        
    `,
    "service.ts": `const ${folder}Model = require('./${folder}.model');

        // Service functions for User model
        const ${folder}Service = {
            createUser: async (userData) => {
                try {
                    const newUser = new ${folder}Model(userData);
                    const savedUser = await newUser.save();
                    return savedUser;
                } catch (error) {
                    throw new Error('Error creating user');
                }
            },
            // Add more service functions (e.g., getUserById, updateUser, etc.) as needed
        };
        
        module.exports = ${folder}Service;
        
    `,
    "router.ts": `const express = require('express');
        const ${folder}Controller = require('./userController');
        
        const router = express.Router();
        
        // Define routes
        router.post('/users', ${folder}Controller.createUser);
        // Add more routes (e.g., GET, PUT, DELETE) as needed
        
        module.exports = router;
        
    `,
  };

  try {
    // Create the folder
    await fs.mkdir(path.join(__dirname, folder));

    // Loop through each extension and create the corresponding file with dummy content
    for (const extension in extensions) {
      if (extensions.hasOwnProperty(extension)) {
        await fs.writeFile(
          path.join(
            __dirname,
            `${folder}/${folder.toLowerCase()}.${extension}`
          ),
          extensions[extension]
        );
      }
    }
  } catch (error) {
    console.error(
      `Error creating files for folder ${folder}: ${error.message}`
    );
  }
}

async function main(folder) {
  try {
    await createFiles(folder);
  } catch (error) {
    console.error(
      `Error creating files for folder ${folder}: ${error.message}`
    );
  }
}

module.exports = { createFiles, main };
